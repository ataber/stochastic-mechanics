Elm.ReactionNetwork = Elm.ReactionNetwork || {};
Elm.ReactionNetwork.make = function (_elm) {
   "use strict";
   _elm.ReactionNetwork = _elm.ReactionNetwork || {};
   if (_elm.ReactionNetwork.values)
   return _elm.ReactionNetwork.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ReactionNetwork",
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm);
   var newSpeciesId = function (model) {
      return function () {
         var ids = A2($List.map,
         function (x) {
            return x.id;
         },
         model.species);
         return function () {
            var _v0 = $List.maximum(ids);
            switch (_v0.ctor)
            {case "Just": return _v0._0 + 1;
               case "Nothing": return 1;}
            _U.badCase($moduleName,
            "between lines 74 and 76");
         }();
      }();
   };
   var update = F2(function (msg,
   model) {
      return function () {
         switch (msg.ctor)
         {case "AddEdge":
            return function () {
                 var newEdges = A2($Basics._op["++"],
                 model.edges,
                 _L.fromArray([msg._0]));
                 return {ctor: "_Tuple2"
                        ,_0: _U.replace([["edges"
                                         ,newEdges]],
                        model)
                        ,_1: $Effects.none};
              }();
            case "AddSpecies":
            return function () {
                 var newSpecies = A2($Basics._op["++"],
                 model.species,
                 _L.fromArray([msg._0]));
                 return {ctor: "_Tuple2"
                        ,_0: _U.replace([["species"
                                         ,newSpecies]],
                        model)
                        ,_1: $Effects.none};
              }();
            case "AddTransition":
            return function () {
                 var newTransitions = A2($Basics._op["++"],
                 model.transitions,
                 _L.fromArray([msg._0]));
                 return {ctor: "_Tuple2"
                        ,_0: _U.replace([["transitions"
                                         ,newTransitions]],
                        model)
                        ,_1: $Effects.none};
              }();}
         _U.badCase($moduleName,
         "between lines 52 and 66");
      }();
   });
   var AddEdge = function (a) {
      return {ctor: "AddEdge"
             ,_0: a};
   };
   var AddTransition = function (a) {
      return {ctor: "AddTransition"
             ,_0: a};
   };
   var AddSpecies = function (a) {
      return {ctor: "AddSpecies"
             ,_0: a};
   };
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("row")]),
      _L.fromArray([A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("six columns")]),
                   _L.fromArray([A2($Html.form,
                   _L.fromArray([$Html$Attributes.id("add-species")
                                ,A4($Html$Events.onWithOptions,
                                "submit",
                                {_: {}
                                ,preventDefault: true
                                ,stopPropagation: false},
                                $Json$Decode.value,
                                function (x) {
                                   return A2($Signal.message,
                                   address,
                                   AddSpecies({_: {}
                                              ,id: newSpeciesId(model)
                                              ,label: "abc"
                                              ,quantity: 0}));
                                })]),
                   _L.fromArray([A2($Html.input,
                                _L.fromArray([$Html$Attributes.type$("text")
                                             ,$Html$Attributes.id("species-name")
                                             ,$Html$Attributes.placeholder("New Species Name")
                                             ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                                   ,_0: "margin-right"
                                                                                   ,_1: "5px"}]))]),
                                _L.fromArray([]))
                                ,A2($Html.input,
                                _L.fromArray([$Html$Attributes.type$("submit")
                                             ,$Html$Attributes.$class("button")
                                             ,$Html$Attributes.value("Add New Species")]),
                                _L.fromArray([]))
                                ,A2($Html.div,
                                _L.fromArray([]),
                                _L.fromArray([$Html.text($Basics.toString(model))]))]))]))
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("six columns")]),
                   _L.fromArray([A2($Html.form,
                   _L.fromArray([$Html$Attributes.id("add-transition")]),
                   _L.fromArray([A2($Html.input,
                   _L.fromArray([$Html$Attributes.type$("submit")
                                ,$Html$Attributes.$class("button")
                                ,$Html$Attributes.value("Add New Transition")]),
                   _L.fromArray([]))]))]))]));
   });
   var init = {ctor: "_Tuple2"
              ,_0: {_: {}
                   ,edges: _L.fromArray([])
                   ,species: _L.fromArray([])
                   ,transitions: _L.fromArray([])}
              ,_1: $Effects.none};
   var app = $StartApp.start({_: {}
                             ,init: init
                             ,inputs: _L.fromArray([])
                             ,update: update
                             ,view: view});
   var main = app.html;
   var Edge = F2(function (a,b) {
      return {_: {}
             ,destId: b
             ,sourceId: a};
   });
   var Transition = F2(function (a,
   b) {
      return {_: {},id: a,rate: b};
   });
   var Species = F3(function (a,
   b,
   c) {
      return {_: {}
             ,id: a
             ,label: b
             ,quantity: c};
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,edges: c
             ,species: a
             ,transitions: b};
   });
   var addEdge = Elm.Native.Port.make(_elm).inboundSignal("addEdge",
   "ReactionNetwork.Edge",
   function (v) {
      return typeof v === "object" && "sourceId" in v && "destId" in v ? {_: {}
                                                                         ,sourceId: typeof v.sourceId === "number" ? v.sourceId : _U.badPort("a number",
                                                                         v.sourceId)
                                                                         ,destId: typeof v.destId === "number" ? v.destId : _U.badPort("a number",
                                                                         v.destId)} : _U.badPort("an object with fields `sourceId`, `destId`",
      v);
   });
   var addTransition = Elm.Native.Port.make(_elm).inboundSignal("addTransition",
   "ReactionNetwork.Transition",
   function (v) {
      return typeof v === "object" && "id" in v && "rate" in v ? {_: {}
                                                                 ,id: typeof v.id === "number" ? v.id : _U.badPort("a number",
                                                                 v.id)
                                                                 ,rate: typeof v.rate === "number" ? v.rate : _U.badPort("a number",
                                                                 v.rate)} : _U.badPort("an object with fields `id`, `rate`",
      v);
   });
   var addSpecies = Elm.Native.Port.make(_elm).inboundSignal("addSpecies",
   "ReactionNetwork.Species",
   function (v) {
      return typeof v === "object" && "id" in v && "label" in v && "quantity" in v ? {_: {}
                                                                                     ,id: typeof v.id === "number" ? v.id : _U.badPort("a number",
                                                                                     v.id)
                                                                                     ,label: typeof v.label === "string" || typeof v.label === "object" && v.label instanceof String ? v.label : _U.badPort("a string",
                                                                                     v.label)
                                                                                     ,quantity: typeof v.quantity === "number" ? v.quantity : _U.badPort("a number",
                                                                                     v.quantity)} : _U.badPort("an object with fields `id`, `label`, `quantity`",
      v);
   });
   _elm.ReactionNetwork.values = {_op: _op
                                 ,init: init
                                 ,update: update
                                 ,view: view
                                 ,main: main
                                 ,Model: Model};
   return _elm.ReactionNetwork.values;
};